generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique @db.VarChar(100)
  hash        String       @db.VarChar(120)
  userName    String       @db.VarChar(100)
  comments    Comment[]
  posts       Post[]
  attachments Attachment[]

  @@index([id, userName])
  @@index([id, email])
  @@map("users")
}

model Post {
  id           Int         @id @default(autoincrement())
  homePage     String?     @db.VarChar(400)
  text         String      @db.VarChar(5000)
  createdAt    DateTime    @default(now())
  authorId     Int
  author       User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments     Comment[]
  attachmentId Int?        @unique
  attachment   Attachment? @relation(fields: [attachmentId], references: [id])

  @@index([id, createdAt])
  @@map("posts")
}

model Comment {
  id           Int         @id @default(autoincrement())
  homePage     String?     @db.VarChar(400)
  text         String      @db.VarChar(5000)
  createdAt    DateTime    @default(now())
  authorId     Int
  author       User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId       Int
  post         Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyToId    Int?
  replyTo      Comment?    @relation("Replies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies      Comment[]   @relation("Replies")
  attachmentId Int?        @unique
  attachment   Attachment? @relation(fields: [attachmentId], references: [id])

  @@map("comments")
}

model Attachment {
  id               Int            @id @default(autoincrement())
  fileUUID         String         @db.Char(36)
  originalFileName String         @db.VarChar(300)
  type             AttachmentType
  post             Post?
  comment          Comment?
  user             User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId           Int?

  @@map("attachments")
}

enum AttachmentType {
  IMAGE
  TEXT
}
